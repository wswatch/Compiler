package token;

import java.util.ArrayList;
class TokenError extends Exception{		// throw error
	public TokenError(String s) {
		super(s);
	}
}
class Comment {		// the comment part
	private ArrayList<String> txt;
	public void addContent(ArrayList<String> content) {
		txt = content;
	}
	public ArrayList<String> deleteComment() {
		String str;
		ArrayList<String> noComment = new ArrayList<String>();
		char ch;
		boolean isInComment = false;
		boolean isSlash = false;
		boolean isStar = false;
		boolean notStop = true;
		String newTxt = null;
		int validStart = 0;

		for(int i = 0; i < txt.size(); ++i) {
			str = txt.get(i);
			newTxt = "";
			notStop = true;
			for(int j = 0; j < str.length() && notStop; ++j) {
				ch = str.charAt(j);
				if(isInComment) {		// find 
					if(isStar) {
						if(ch == '/') {
							isInComment = false;
							validStart = j+1;
						}
						else if(ch != '*')
							isStar = false;
					}
					else if(ch == '*'){
						isStar = true;
					}
				}
				else {
					if (isSlash) {
						if (ch == '/') {
							newTxt = newTxt + str.substring(validStart,j-1);
							notStop = false;
						}
						else if(ch == '*') {
							newTxt = newTxt + str.substring(validStart,j-1);
							isInComment = true;
						}
						else
							isSlash = false;	
					}
					else if (ch == '/') {
						isSlash = true;
					}
				}
			}
			if(notStop && (isInComment == false)) {	// if it is not in comment
				if (validStart < str.length())
					newTxt = newTxt + str.substring(validStart);
			}
			if(newTxt.length() > 0) {		// add a new line
				noComment.add(newTxt);
			}
		}
		return noComment;
	}
}

class Tokenizer {
	ArrayList<String> tokenList;
	String word;
	boolean isInString;
	public Tokenizer(ArrayList<String> lines) throws TokenError {
		tokenList = new ArrayList<String>();	// initialize
		word = "";
		isInString = false;
		int i = 0;
		try {
			for(i = 0; i < lines.size(); ++i) {
				add(lines.get(i));
			}
		}
		catch (TokenError e) {
			throw new TokenError("line " + i + ": "+e.getMessage());
		}
	}
	public ArrayList<String> getOut(){
		return tokenList;
	}
	public void add(String content) throws TokenError{
		for(int i = 0; i < content.length(); ++i) {
			add(content.charAt(i));
		}
		if (isInString) {
			throw new TokenError("string Constant must be ended in one line");
		}
		else if (word.length() > 0 ) {
			deal(word);
		}
	}
	public void add(char ch) throws TokenError {
		if(isInString) {		// deal with the string constant
			if(ch == '"') {
				deal(word);
				word = "";
				isInString = false;
			}
			else
				word = word + ch;
		}
		else {
			if(ch == '"') {
				deal(word);		// this might imply some error
				word = "";
				isInString = true;
			}
			else {
				check(ch);
			}
		}
	}
	public void check(char ch) throws TokenError {
		switch(ch) {
		case '{':
		case '}':
		case '(':
		case ')':
		case '[':
		case ']':
		case '.':
		case ',':
		case ';':
		case '+':
		case '-':
		case '*':
		case '/':
		case '&':
		case '|':
		case '<':
		case '>':
		case '=':
		case '~':{
			deal(word);
			word = "";
			String part = "  <symbol> " + ch + " </symbol>";
			tokenList.add(part);
		};break;
		case ' ':{
			deal(word);
			word = "";
		};break;
		default:{
			word = word + ch;
		}
		}
	}
	public void deal(String str) throws TokenError {
		if(str.length() == 0) {		// empty string 
			return;
		}
		String part = null;
		switch(str) {
		case "class":
		case "constructor":
		case "function":
		case "method":
		case "field":
		case "static":
		case "var":
		case "int":
		case "char":
		case "boolean":
		case "void":
		case "true":
		case "false":
		case "null":
		case "this":
		case "let":
		case "do":
		case "if":
		case "else":
		case "while":
		case "return":{
			part = "  <keyword> " + str + " </keyword>";
		};break;
		default:{
			if(isNum(str)) {
				if (isValidNum(str)) {
					part = "  <integerConstant> " + str + " </integerConstant>";
				}
				else {
					throw new TokenError(str +" is not a valid integer");
				}
			}
			else {
				if(isIdentifier(str)) {
					part = "  <identifier> " + str + " </identifier>";
				}
				else 
					throw new TokenError(str + " is not a feasible identifier");
			}
		}
		}
		tokenList.add(part);
	}
	public boolean isNum(String num) {
		boolean res = true;
		for (int i = 0; i < num.length() && res; ++i) {
			res = Character.isDigit(num.charAt(i));		
		}
		return res;
	}
	public boolean isValidNum(String num) {
		boolean res = true;
		if(num.length() > 5)
			res = false;
		else if(num.length() == 5 && num.compareTo("32767")>0) {
			res = false;
		}
		return res;
	}
	public boolean isIdentifier(String str) {
		boolean res = true;
		char ch;
		for(int i = 0; i < str.length() && res; ++i) {
			ch = str.charAt(i);
			if(!Character.isDigit(ch) && !Character.isDigit(ch) && ch != '_') {
				res = false;
			}
		}
		if(Character.isDigit(str.charAt(0))) {
			res = false;
		}
		return res;
	}
}
