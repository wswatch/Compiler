package token;

import java.util.ArrayList;
class CommentError extends Exception {
	public CommentError(String s) {
		super(s);
	}
}
class Translate {		// the comment part
	boolean isInComment;
	public Translate() {
		isInComment = false;
	}
	public String deleteComment(String str) {		// delete one line
		String newTxt = "";
		boolean notStop = true;
		boolean isStar = false;
		boolean isSlash = false;
		int validStart = 0;
		char ch;
		
		for(int j = 0; j < str.length() && notStop; ++j) {
			ch = str.charAt(j);
			if(isInComment) {		// find 
				if(isStar) {
					if(ch == '/') {
						isInComment = false;
						validStart = j+1;
					}
					else if(ch != '*')
						isStar = false;
				}
				else if(ch == '*'){
					isStar = true;
				}
			}
			else {
				if (isSlash) {
					if (ch == '/') {
						newTxt = newTxt + str.substring(validStart,j-1);
						notStop = false;
					}
					else if(ch == '*') {
						newTxt = newTxt + str.substring(validStart,j-1);
						isInComment = true;
					}
					else
						isSlash = false;	
				}
				else if (ch == '/') {
					isSlash = true;
				}
			}
		}
		if(notStop && (isInComment == false)) {	// if it is not in comment
			if (validStart < str.length()) {
				if(newTxt.length() == 0) {
					newTxt = str.substring(validStart);
				}
				else {
					newTxt = newTxt + " " + str.substring(validStart);
				}
			}
		}
		return newTxt;
	}
	public ArrayList<String> run(ArrayList<String> lines) throws CommentError, TokenError {
		String newTxt;
		String str;
		ArrayList<String> output = new ArrayList<String>();
		ArrayList<Token> tokenList = null;
		isInComment = false;
		Tokenizer tokenizer = new Tokenizer();
		
		for(int i = 0; i < lines.size(); ++i) {
			
			newTxt = deleteComment(lines.get(i));
			if(newTxt.length() > 0) {		// add a new line
				tokenList = tokenizer.translate(newTxt);
				tokenizer.addToken(tokenList);
			}
		}
		output = tokenizer.getOut();
		if (isInComment) {
			throw new CommentError("Comment does not meet a end mark");
		}
		return output;
	}
}